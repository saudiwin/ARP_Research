
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Run A-Nominate on Tunisian ARP data from Bawsala
> 
> # Read in data
> require(pscl)
Loading required package: pscl
Loading required package: MASS
Loading required package: lattice
Classes and Methods for R developed in the

Political Science Computational Laboratory

Department of Political Science

Stanford University

Simon Jackman

hurdle and zeroinfl functions by Achim Zeileis

> require(parallel)
Loading required package: parallel
> require(anominate)
Loading required package: anominate
Loading required package: coda
Loading required package: wnominate

## W-NOMINATE Ideal Point Package
## Copyright 2006 -2016
## Keith Poole, Jeffrey Lewis, James Lo, and Royce Carroll
## Support provided by the U.S. National Science Foundation
## NSF Grant SES-0611974

Loading required package: oc

## Optimal Classification Ideal Point Package
## Copyright 2007 -2016
## Keith Poole, Jeffrey Lewis, James Lo, and Royce Carroll
## Support provided by the U.S. National Science Foundation
## NSF Grant SES-0611974

Loading required package: MCMCpack
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2016 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##

## alpha-NOMINATE Ideal Point Package
## Copyright 2013 - 2016
## Royce Carroll, Christopher Hare, Jeffrey B. Lewis, James Lo, Keith Poole, and Howard Rosenthal
## Support provided by the U.S. National Science Foundation
## NSF Grant SES-0611974

> require(stringr)
Loading required package: stringr
> require(data.table)
Loading required package: data.table
> #source("C:/Users/bobku/Box Sync/Big Data/Data/R Code_preliminary implementation/R Test Data/R Scripts/Ggplot2_theme.R")
> first_d_constraint <- "Front Populaire"
> second_d_constraint <- "Afek Tounes, le mouvement national et l'appel des tunisiens à l'étranger"
> 
> #raw_data2 <- read.csv('arp_votes_v2.csv',header=TRUE,stringsAsFactors = FALSE)
> #raw_data <- read.csv('arp_votes.csv',header=TRUE,stringsAsFactors = FALSE)
> # keep_cols <- sapply(raw_data,is.character)
> # raw_data <- raw_data[,keep_cols]
> raw_data2 <- readRDS('raw_data2.rds')
> raw_data <- readRDS('raw_data.rds')
> 
> info_legis <- data.table(raw_data)
> setkey(info_legis,"legis.names")
> party_info <- data.table(raw_data2[,1:2],key = "legis.names")
> info_legis <- party_info[info_legis]
> info_legis <- info_legis[legis.names=='Said Aidi',Party:='Mouvement Nidaa Tounes']
> votes <- info_legis[,3:length(info_legis),with=FALSE]
> 
> vote_names <- str_extract(names(votes),"N\\.[0-9][0-9]?[0-9]?\\.201[0-9]")
> vote_names <- ifelse(is.na(vote_names),names(votes),vote_names)
> votes_matrix <- lapply(votes,function(x) factor(x,levels = c("contre","pour"),exclude = "abstenu"))
> votes_matrix <- as.matrix(as.data.frame(lapply(votes_matrix,function(x) as.numeric(x) - 1)))
> row.names(votes_matrix) <- info_legis$legis.names
> num_votes  <- apply(votes_matrix,1,sum,na.rm=TRUE)
> names(num_votes) <- row.names(votes_matrix)
> votes_matrix <- votes_matrix[(num_votes>(mean(num_votes)-2*sd(num_votes))),]
> # Remove bills that have near-unaninous agreement
> bills_agree <- apply(votes_matrix,2,mean,na.rm=TRUE)
> votes_matrix <- votes_matrix[,((bills_agree>0.025) & (bills_agree<0.975))]
> 
> names_legis <- info_legis$Party[(num_votes>(mean(num_votes)-2*sd(num_votes)))]
> # put constraints into the model. For this model, one each for democrats and republicans
> 
> constrain_legis <- sort(which(names_legis %in% first_d_constraint))
> all_legis <- 1:nrow(votes_matrix)
> not_legis <- all_legis[-constrain_legis]
> new_legis <- c(constrain_legis,not_legis)
> votes_matrix <- votes_matrix[new_legis,]
> num_legis <- nrow(votes_matrix)
> num_bills <- ncol(votes_matrix)
> legislator_points <- rep(1:num_legis,times=num_bills)
> bill_points <- rep(1:num_bills,each=num_legis)
> Y <- c(votes_matrix)
> na_filter <- !is.na(Y)
> Y <- Y[na_filter]
> legislator_points <- legislator_points[na_filter]
> bill_points <- bill_points[na_filter]
> fileName <- "nominate.h"
> model_code <- readChar(fileName, file.info(fileName)$size)
> 
> compiled_model <- stan_model(model_code=model_code,model_name="Nominate: 1 dimension")
Error: could not find function "stan_model"
Execution halted
